<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/16/hello-world/"/>
      <url>/2023/07/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h5 id="Democat网站成立，日常更新生活中有趣的知识。同时记录自己的数据科学之旅并开源DS实践项目和OJ平台，仅以此记录自己的学习"><a href="#Democat网站成立，日常更新生活中有趣的知识。同时记录自己的数据科学之旅并开源DS实践项目和OJ平台，仅以此记录自己的学习" class="headerlink" title="Democat网站成立，日常更新生活中有趣的知识。同时记录自己的数据科学之旅并开源DS实践项目和OJ平台，仅以此记录自己的学习"></a>Democat网站成立，日常更新生活中有趣的知识。同时记录自己的数据科学之旅并开源DS实践项目和OJ平台，仅以此记录自己的学习</h5><p><img src="themes/loading.gif" data-original="https://pic.3gbizhi.com/2020/0904/20200904063625692.jpg" alt="Hello!"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cv中的一些常用术语</title>
      <link href="/2023/03/03/ji-suan-ji-shi-jue-yi-xie-chang-yong-zhu-yu/"/>
      <url>/2023/03/03/ji-suan-ji-shi-jue-yi-xie-chang-yong-zhu-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机视觉一些常用术语"><a href="#计算机视觉一些常用术语" class="headerlink" title="计算机视觉一些常用术语"></a>计算机视觉一些常用术语</h2><h3 id="1-backbone"><a href="#1-backbone" class="headerlink" title="1.backbone"></a>1.<a href="https://www.zhihu.com/search?q=backbone&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2328543924%7D">backbone</a></h3><p>翻译为主干网络的意思，既然说是主干网络，就代表其是网络的一部分，那么是哪部分呢？翻译的很好，主干部分，哈哈哈哈，文字游戏了哈。这个主干网络大多时候指的是提取特征的网络，其作用就是提取图片中的信息，共后面的网络使用。这些网络经常使用的是resnet，VGG等，而不是我们自己设计的网络，因为这些网络已经证明了在分类等问题上的特征提取能力是很强的。在用这些网络作为backbone的时候，都是直接加载官方已经训练好的模型参数，后面接着我们自己的网络。让网络的这两个部分同时进行训练，因为加载的<a href="https://www.zhihu.com/search?q=backbone%E6%A8%A1%E5%9E%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2328543924%7D">backbone模型</a>已经具有提取特征的能力了，在我们的训练过程中，会对他进行微调，使得其更适合于我们自己的任务。</p><h3 id="2-head"><a href="#2-head" class="headerlink" title="2.head"></a>2.head</h3><p>head是获取网络输出内容的网络，利用之前提取的特征，head利用这些特征，做出预测。</p><h3 id="3-neck"><a href="#3-neck" class="headerlink" title="3.neck"></a>3.<a href="https://www.zhihu.com/search?q=neck&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2328543924%7D">neck</a></h3><p>是放在backbone和head之间的，是为了更好的利用backbone提取的特征</p><h3 id="4-bottleneck"><a href="#4-bottleneck" class="headerlink" title="4.bottleneck"></a>4.bottleneck</h3><p>瓶颈的意思，通常指的是网网络输入的数据维度和输出的维度不同，输出的维度比输入的小了许多，就像脖子一样，变细了。经常设置的参数 bottle_num=256，指的是网络输出的数据的维度是256 ，可是输入进来的可能是1024维度的。</p><h3 id="5-GAP"><a href="#5-GAP" class="headerlink" title="5.GAP"></a><a href="https://link.zhihu.com/?target=http://5.gap/">5.GAP</a></h3><p>在设计的网络中经常能够看到gap这个层，我之前不知道是干啥的，后了解了，就是Global Average Pool<a href="https://www.zhihu.com/search?q=%E5%85%A8%E5%B1%80%E5%B9%B3%E5%9D%87%E6%B1%A0%E5%8C%96&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2328543924%7D">全局平均池化</a>，就是将某个通道的特征取平均值，经常使用AdaptativeAvgpoold(1),在pytorch中，这个代表自适应性全局平均池化，说人话就是将某个通道的特征取平均值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>gap <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-Embedding"><a href="#6-Embedding" class="headerlink" title="6.Embedding"></a>6.Embedding</h3><p> 深度学习方法都是利用使用线性和非线性转换对复杂的数据进行自动特征抽取，并将特征表示为“向量”（<a href="https://www.zhihu.com/search?q=vector&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2328543924%7D">vector</a>），这一过程一般也称为“嵌入”（embedding）</p><h3 id="7-用于预训练的任务被称为前置-代理任务-pretext-task"><a href="#7-用于预训练的任务被称为前置-代理任务-pretext-task" class="headerlink" title="7.用于预训练的任务被称为前置/代理任务(pretext task)"></a>7.用于预训练的任务被称为前置/代理任务(pretext task)</h3><p>用于微调的任务被称为下游任务(downstream task)</p><h3 id="8-temperature-parameters-https-www-zhihu-com-search-q-temperature-parameters-search-source-Entity-hybrid-search-source-Entity-hybrid-search-extra-“sourceType”-3A”answer”-2C”sourceId”-3A2328543924"><a href="#8-temperature-parameters-https-www-zhihu-com-search-q-temperature-parameters-search-source-Entity-hybrid-search-source-Entity-hybrid-search-extra-“sourceType”-3A”answer”-2C”sourceId”-3A2328543924" class="headerlink" title="8.[temperature parameters](https://www.zhihu.com/search?q=temperature parameters&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={“sourceType”%3A”answer”%2C”sourceId”%3A2328543924})"></a>8.[temperature parameters](<a href="https://www.zhihu.com/search?q=temperature">https://www.zhihu.com/search?q=temperature</a> parameters&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={“sourceType”%3A”answer”%2C”sourceId”%3A2328543924})</h3><p>在论文中经常能看到这个温度参数的身影，那么他都有什么用处呢？比如经常看到下面这样的式子：里面的beta就是temperature parameter，他在运算的时候起到什么作用呢？是这样的，他可以起到平滑softmax输出结果的作用，举例子如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>x1 <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">2</span>  <span class="token comment"># beta 为2</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>x2 <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">0.5</span>  <span class="token comment"># beta 为0.5</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment"># 输出结果如下：</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.0900</span><span class="token punctuation">,</span> <span class="token number">0.2447</span><span class="token punctuation">,</span> <span class="token number">0.6652</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1863</span><span class="token punctuation">,</span> <span class="token number">0.3072</span><span class="token punctuation">,</span> <span class="token number">0.5065</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.0159</span><span class="token punctuation">,</span> <span class="token number">0.1173</span><span class="token punctuation">,</span> <span class="token number">0.8668</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB948677b76304d169867b4de8821591fc?method=download&amp;shareKey=9a9e1edfb1a70afeea71ecd22c583c68" alt="image-20230303154539669"></p><p>当beta&gt;1的时候，可以将输出结果变得平滑，当beta&lt;1的时候，可以让输出结果变得差异更大一下，更尖锐一些。如果beta比较大，则分类的crossentropy损失会很大，可以在不同的迭代次数里，使用不同的beta数值，有点类似于学习率的效果。</p><h3 id="9-热身Warm-up"><a href="#9-热身Warm-up" class="headerlink" title="9.热身Warm up"></a>9.热身Warm up</h3><p>Warm up指的是用一个小的学习率先训练几个<a href="https://www.zhihu.com/search?q=epoch&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2328543924%7D">epoch</a>，这是因为网络的参数是随机初始化的，一开始就采用较大的学习率容易数值不稳定。</p><h3 id="10-end-to-end"><a href="#10-end-to-end" class="headerlink" title="10.end to end"></a>10.end to end</h3><p> 在论文中经常能遇到end to end这样的描述，那么到底什么是端到端呢？其实就是给了一个输入，我们就给出一个输出，不管其中的过程多么复杂，但只要给了一个输入，机会对应一个输出。比如分类问题，你输入了一张图片，肯呢个网络有特征提取，全链接分类，概率计算什么的，但是跳出算法问题，单从结果来看，就是给了一张输入，输出了一个预测结果。End-To-End的方案，即输入一张图，输出最终想要的结果，算法细节和学习过程全部丢给了神经网络。</p><h3 id="11-domain-adaptation-和domain-generalization-域适应和域泛化"><a href="#11-domain-adaptation-和domain-generalization-域适应和域泛化" class="headerlink" title="11 domain adaptation 和domain generalization 域适应和域泛化"></a>11 domain adaptation 和domain generalization 域适应和域泛化</h3><p>域适应中，常见的设置是源域D_S完全已知，目标域D_T有或无标签。域适应方法试着将源域知识迁移到目标域。第二种场景可以视为domain generalization域泛化。这种更常见因为将模型应用到完全未知的领域，正因为没有见过，所以没有任何模型更新和微调。这种泛化问题就是一种开集问题，由于所需预测类别较多，所以比较头疼</p><p>转载自：<a href="https://www.zhihu.com/question/399611596/answer/2328543924">https://www.zhihu.com/question/399611596/answer/2328543924</a></p><p>来源：知乎</p><p>作者：连诗路</p>]]></content>
      
      
      <categories>
          
          <category> record </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用Chatgpt api的方法</title>
      <link href="/2023/02/09/python-shi-yong-chatgpt-api-de-fang-fa/"/>
      <url>/2023/02/09/python-shi-yong-chatgpt-api-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="python使用Chatgpt-api的方法"><a href="#python使用Chatgpt-api的方法" class="headerlink" title="python使用Chatgpt api的方法"></a>python使用Chatgpt api的方法</h1><h2 id="不同方法的区别"><a href="#不同方法的区别" class="headerlink" title="不同方法的区别"></a>不同方法的区别</h2><h3 id="1、method1使用openAi自带的py库实现"><a href="#1、method1使用openAi自带的py库实现" class="headerlink" title="1、method1使用openAi自带的py库实现"></a>1、method1使用openAi自带的py库实现</h3><p>需要下载openai库，第一次使用比较耗时</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通过使用openai自身的接口实现这个功能</span><span class="token keyword">import</span> openai<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出请输入\'quit\'或者\'exit\'"</span><span class="token punctuation">)</span>openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">"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"</span>start_sequence <span class="token operator">=</span> <span class="token string">"\nuser:"</span>restart_sequence <span class="token operator">=</span> <span class="token string">"\nChatgpt: "</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>restart_sequence<span class="token punctuation">)</span>    <span class="token keyword">if</span> prompt <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token string">"exit"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span>              model<span class="token operator">=</span><span class="token string">"text-davinci-003"</span><span class="token punctuation">,</span><span class="token comment">#</span>              prompt <span class="token operator">=</span> prompt<span class="token punctuation">,</span>              temperature<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>              max_tokens<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">,</span>              frequency_penalty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>              presence_penalty<span class="token operator">=</span><span class="token number">0</span>            <span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>start_sequence<span class="token punctuation">,</span>response<span class="token punctuation">[</span><span class="token string">"choices"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> error<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、method2使用爬虫的post请求获取"><a href="#2、method2使用爬虫的post请求获取" class="headerlink" title="2、method2使用爬虫的post请求获取"></a>2、method2使用爬虫的post请求获取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token comment"># 使用requests来直接抓api，速度较慢</span><span class="token keyword">import</span> requests<span class="token punctuation">,</span>jsonapi_key<span class="token operator">=</span><span class="token string">"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"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"Bearer </span><span class="token interpolation"><span class="token punctuation">{</span>api_key<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">}</span>api_url <span class="token operator">=</span> <span class="token string">"https://api.openai.com/v1/completions"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出请输入\'quit\'或者\'exit\'"</span><span class="token punctuation">)</span><span class="token comment">#设置循环可以持续发问</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"user: "</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> prompt <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token string">"exit"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment">#设置请求参数</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'prompt'</span><span class="token punctuation">:</span>prompt<span class="token punctuation">,</span>                    <span class="token string">"model"</span><span class="token punctuation">:</span><span class="token string">"text-davinci-003"</span><span class="token punctuation">,</span>                    <span class="token string">'max_tokens'</span><span class="token punctuation">:</span><span class="token number">2048</span><span class="token punctuation">,</span>                    <span class="token string">'temperature'</span><span class="token punctuation">:</span><span class="token number">0.7</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>            <span class="token comment">#发送HTTP POST请求</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span>json <span class="token operator">=</span> data<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>            resp <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"chatgpt:"</span><span class="token punctuation">,</span>resp<span class="token punctuation">[</span><span class="token string">"choices"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyError <span class="token keyword">as</span> error<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'prompt'</span><span class="token punctuation">:</span> prompt<span class="token punctuation">,</span>                <span class="token string">"model"</span><span class="token punctuation">:</span> <span class="token string">"text-davinci-003"</span><span class="token punctuation">,</span>                <span class="token string">'max_tokens'</span><span class="token punctuation">:</span> <span class="token number">2048</span><span class="token punctuation">,</span>                <span class="token string">'temperature'</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>        <span class="token comment"># 发送HTTP POST请求</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        resp <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"chatgpt:"</span><span class="token punctuation">,</span> resp<span class="token punctuation">[</span><span class="token string">"choices"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、method3使用简单数据结构记住前言"><a href="#3、method3使用简单数据结构记住前言" class="headerlink" title="3、method3使用简单数据结构记住前言"></a>3、method3使用简单数据结构记住前言</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 因为chatgpt的的api不具有记忆功能，在不进行复杂考虑的情况下，使用简单数据结构来进行前言存储</span><span class="token keyword">import</span> requests<span class="token punctuation">,</span>jsonsave_max_len<span class="token operator">=</span><span class="token number">200</span>save_action <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cur<span class="token operator">=</span><span class="token number">0</span>api_key<span class="token operator">=</span><span class="token string">"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"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"Bearer </span><span class="token interpolation"><span class="token punctuation">{</span>api_key<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">}</span>api_url <span class="token operator">=</span> <span class="token string">"https://api.openai.com/v1/completions"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出请输入\'quit\'或者\'exit\'"</span><span class="token punctuation">)</span><span class="token comment">#设置循环可以持续发问</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"user: "</span><span class="token punctuation">)</span>    save_action<span class="token punctuation">.</span>append<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token keyword">if</span> prompt <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token string">"exit"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment">#设置请求参数</span>        <span class="token keyword">if</span> cur<span class="token operator">&gt;</span>save_max_len<span class="token punctuation">:</span>            save_action<span class="token operator">=</span>save_action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'prompt'</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_action<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"model"</span><span class="token punctuation">:</span><span class="token string">"text-davinci-003"</span><span class="token punctuation">,</span>                <span class="token string">'max_tokens'</span><span class="token punctuation">:</span><span class="token number">2048</span><span class="token punctuation">,</span>                <span class="token string">'temperature'</span><span class="token punctuation">:</span><span class="token number">0.7</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>        <span class="token comment">#发送HTTP POST请求</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span>json <span class="token operator">=</span> data<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>        resp <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"chatgpt:"</span><span class="token punctuation">,</span>resp<span class="token punctuation">[</span><span class="token string">"choices"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用api来进行程序编写，无法实现网页版的记忆功能，想要实现的一个思路是使用国外服务器写一个headless的selenium爬虫来进行模拟，这样可以在纯命令行里面使用脚本</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp康复计划</title>
      <link href="/2023/02/03/cpp-kang-fu-ji-hua/"/>
      <url>/2023/02/03/cpp-kang-fu-ji-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Cpp康复计划"><a href="#Cpp康复计划" class="headerlink" title="Cpp康复计划"></a>Cpp康复计划</h2><h3 id="C-中的数组排序"><a href="#C-中的数组排序" class="headerlink" title="C++中的数组排序"></a>C++中的数组排序</h3><p>常用的数组排序方法是使用sort函数来进行排序，sort函数有三个参数，其中第一个参数是待排序元素的起点地址，第二个参数是待排序数组的终点位置，第三个参数是排序规则，不填的话默认还是升序排序规则，也可以自定义排序规则。</p><p>通常是使用的升序排序方法是：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(nums.begin(),nums.end());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里记录一下降序排序方法：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sort(nums.rbegin(),nums.rend());## 或者使用sort(nums.begin(),nums.end(),greater&lt;int&gt;());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="C-中的npos"><a href="#C-中的npos" class="headerlink" title="C++中的npos"></a>C++中的npos</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">basic_string::nposstatic const size_type npos = -1;//定義<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的意思是npos是一个常数，表示了Maximum value for size_t。许多容器都提供这个东西，用来表示不存在的位置，类别一般是std::container_type::size_type。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;  #include &lt;limits&gt;  #include &lt;string&gt;  using namespace std;    int main()  {      size_t npos = -1;      cout &lt;&lt; "npos: " &lt;&lt; npos &lt;&lt; endl;      cout &lt;&lt; "size_t max: " &lt;&lt; numeric_limits&lt;size_t&gt;::max() &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果相等，表示npos是size_t最大值。</p><h4 id="npos的用法"><a href="#npos的用法" class="headerlink" title="npos的用法"></a>npos的用法</h4><p>1、npos可以表示string的結束位置，是string::type_size 型別的，也就是find（）返回的型別。find函式在找不到指定值得情況下會返回string::npos。</p><p>2、string::npos作為string的成員函式的一個長度引數時，表示“直到字串結束（until the end of the string）”。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">string filename = "cat.cpp";size_t idx = filename.find(".");if(idx==string::npos)    cout&lt;&lt;"can't find aims values"&lt;&lt;endl;else{    filename.replace(idx+1,string::npos,"cat");    cout&lt;&lt;filename&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="auto的用法"><a href="#auto的用法" class="headerlink" title="auto的用法"></a>auto的用法</h3><h3 id="用于引用和取地址符的区别"><a href="#用于引用和取地址符的区别" class="headerlink" title="&amp;用于引用和取地址符的区别"></a>&amp;用于引用和取地址符的区别</h3><p>1.引用。引用就是某一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。</p><p>&amp;作为引用的时候，必须在定义时候就进行初始化，若不进行初始化则会编译报错。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>ra <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后面对ra 的操作，就是对a的操作。ra-1，则a减少1；</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int function(int &amp;i){    i--;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里表示进去的参数是直接引用，对i进行操作会直接操作在实参上。</p><p>2.取地址</p><p>&amp;作为取地址用的时候，要跟指针联系在一起，因为指针就是用来存放地址的。</p><p>取地址就是你想取某变量（形参或者实参）的地址就用&amp;前置表示要取地址了，取的是该变量的内存地址。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>N<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两者区别引用的格式：<br>类型名  &amp;  别名 = var;<br>1.定义的时候必须初始化，即&amp; 前面有类名或类型名，&amp;别名后面一定带 “=” （在= 左边）；<br>2.&amp;后面的别名是新的名字，之前不存在。</p><p>&amp;取地址时：<br>如果&amp;是取址运算符，也就意味着取一个变量的地址并付给指针变量。&amp;后面紧跟的是变量（已存在）；</p><h3 id="指针使用"><a href="#指针使用" class="headerlink" title="指针使用"></a>指针使用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ap <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：0000000c3cdff93c</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：0000000c3cdff93c</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：100</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：0000000c3cdff930</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token operator">*</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：0000000c3cdff93c</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">&amp;</span><span class="token operator">*</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：0000000000000064</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">&amp;</span><span class="token operator">*</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：000000f15bfffbac</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>printf(“%d\n”,&amp;a);</li></ol><p>这一句输出的是变量a的地址，毋庸置疑。</p><ol start="2"><li>printf(“%d\n”,ap);</li></ol><p>这一句是输出的指针的值，与的一个输出相同，也就是说<strong>指针的值是指针所指向的变量的地址</strong></p><ol start="3"><li>printf(“%d\n”,*ap);</li></ol><p>在指针变量的前面加了一个号，不加星号的ap指针是指向变量a的地址，而加了星变成了指针ap所指向的变量a的内容，</p><p>所以，我们可以理解为*<strong>号是获取指针变量所指向的地址所存放的内容的操作</strong>，即为解引用操作符。</p><ol start="4"><li>printf(“%d\n”,&amp;ap);</li></ol><p>这一句（同1）是取得指针变量ap的地址</p><ol start="5"><li>printf(“%d\n”,&amp;*ap);</li></ol><p>这一句根据第3点的分析，ap指向的是变量a的内容，而&amp;ap即是获取变量a的内容的地址，即是变量a的地址所以输出内容同（1）</p><p>6.printf(“%p\n”,*&amp;*ap);</p><p>这一句将对地址的内容进行解析，得到的是该地址的内容，发现将其解析以后变成了16进制。</p><h3 id="unordered-map使用方法"><a href="#unordered-map使用方法" class="headerlink" title="unordered_map使用方法"></a>unordered_map使用方法</h3><p>unordered</p><p>unordered直译就是无序，可以看到这是创建一个无序map，原始的map会将存储的数据进行排序。所以他和map唯一的不同就是无序。</p><p>而unordered_map存在于**&lt;unordered_map&gt;**中，并在std的命名空间里面。因此，如果想要使用这个容器，就要：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而unordered_map的容器定义为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span>                        <span class="token comment">//键值对中键的类型</span>           <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>                          <span class="token comment">//键值对中值的类型</span>           <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> hash<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span>           <span class="token comment">//容器内部存储键值对所用的哈希函数</span>           <span class="token keyword">class</span> <span class="token class-name">Pred</span> <span class="token operator">=</span> equal_to<span class="token operator">&lt;</span>Key<span class="token operator">&gt;</span><span class="token punctuation">,</span>       <span class="token comment">//判断各个键值对键相同的规则</span>           <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>  <span class="token comment">// 指定分配器对象的类型</span>           <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">unordered_map</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中可以明显看出前两个为必须传入的实参，后面为默认形参。那么每一个参数的含义分别如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>&lt;key,T&gt;</td><td>前 2 个参数分别用于确定键值对中键和值的类型，也就是存储键值对的类型。</td></tr><tr><td>Hash = hash<key></key></td><td>用于指明容器在存储各个键值对时要使用的哈希函数，默认使用 STL 标准库提供的 hash<key> 哈希函数。注意，默认哈希函数只适用于基本数据类型（包括 string 类型），而不适用于自定义的结构体或者类。</key></td></tr><tr><td>Pred = equal_to<key></key></td><td>要知道，unordered_map 容器中存储的各个键值对的键是不能相等的，而判断是否相等的规则，就由此参数指定。默认情况下，使用 STL 标准库中提供的 equal_to<key> 规则，该规则仅支持可直接用 == 运算符做比较的数据类型。</key></td></tr></tbody></table><p>创建unordered_map的办法：</p><h3 id="allocator使用"><a href="#allocator使用" class="headerlink" title="allocator使用"></a>allocator使用</h3><h3 id="iota使用"><a href="#iota使用" class="headerlink" title="iota使用"></a>iota使用</h3><p><code>iota</code>用一个从value递增的数列给[first, last)的容器赋值，举个简单地例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> idx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">iota</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 0123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-中pair的使用"><a href="#C-中pair的使用" class="headerlink" title="C++中pair的使用"></a>C++中pair的使用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 参照力扣901.股票价格跨度</span><span class="token keyword">class</span> <span class="token class-name">StockSpanner</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">StockSpanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>            weight<span class="token operator">+=</span>ans<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pair也是一个类模板，它提供了一种将两个异构数据对象存储为一个单元的方法，类似于tuple对两种元素的特殊情况。想要调用pair第一个属性使用first，调用第二个数据使用second，想要创建一个对象使用make_pair方式调用创建一个新对象。</p><h3 id="C-使用vector类"><a href="#C-使用vector类" class="headerlink" title="C++使用vector类"></a>C++使用vector类</h3><p>vector类是一个经常使用的类，是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。其中最重要的特性，线性存储，因此他的空间是连续的。</p><p>记录一些常用的属性函数：</p><pre class="line-numbers language-none"><code class="language-none">1.push_back 在数组的最后添加一个数据2.pop_back 去掉数组的最后一个数据3.at 得到编号位置的数据4.begin 得到数组头的指针5.end 得到数组的最后一个单元+1的指针6.front 得到数组头的引用7.back 得到数组的最后一个单元的引用8.max_size 得到vector最大可以是多大9.capacity 当前vector分配的大小10.size 当前使用数据的大小11.resize 改变当前使用数据的大小，如果它比当前使用的大，者填充默认值12.reserve 改变当前vecotr所分配空间的大小13.erase 删除指针指向的数据项14.clear 清空当前的vector15.rbegin 将vector反转后的开始指针返回(其实就是原来的end-1)16.rend 将vector反转构的结束指针返回(其实就是原来的begin-1)17.empty 判断vector是否为空18.swap 与另一个vector交换数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string类使用"><a href="#string类使用" class="headerlink" title="string类使用"></a>string类使用</h3><p>string是c++中定义字符串常用的方法，通</p><h3 id="vector怎样切片"><a href="#vector怎样切片" class="headerlink" title="vector怎样切片"></a>vector怎样切片</h3><p>vector切片有几种方法:</p><h4 id="一、使用begin-和end-来进行切片"><a href="#一、使用begin-和end-来进行切片" class="headerlink" title="一、使用begin()和end()来进行切片"></a>一、使用begin()和end()来进行切片</h4><p>在C++中，可以使用<code>std::vector</code>类型的<code>begin()</code>和<code>end()</code>函数来切片一个<code>vector</code>。例如，如果我们想要对一个名为<code>v</code>的<code>vector</code>进行切片，可以使用以下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Copy codevector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">auto</span> slice <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的代码将会创建一个新的<code>vector</code>，该<code>vector</code>包含原始<code>vector</code>的第2个元素到倒数第2个元素。</p><h4 id="二、使用erase删除不要的元素"><a href="#二、使用erase删除不要的元素" class="headerlink" title="二、使用erase删除不要的元素"></a>二、使用erase删除不要的元素</h4><p>请注意，这种方法切片的效率可能较低，因为它会创建一个新的<code>vector</code>。如果你需要更高效地切片一个<code>vector</code>，可以考虑使用C++11标准中提供的<code>std::vector</code>的<code>erase()</code>函数来删除不需要的元素。</p><p>例如，如果你想要删除<code>v</code>中的第1个和最后1个元素，可以使用以下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Copy codevector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方法的效率要高于前一种方法，因为它不需要创建新的<code>vector</code>。但是，这种方法可能更难理解和维护，所以应该根据具体情况来选择使用哪种方法。</p><h3 id="function的使用方法"><a href="#function的使用方法" class="headerlink" title="function的使用方法"></a>function的使用方法</h3><h4 id="1、std-function-简介"><a href="#1、std-function-简介" class="headerlink" title="1、std::function 简介"></a>1、std::function 简介</h4><p>类模板std :: function是一个通用的多态函数包装器。 std :: function的实例可以存储，复制和调用任何可调用的目标 ：包括函数，lambda表达式，绑定表达式或其他函数对象，以及指向成员函数和指向数据成员的指针。当std::function对象未包裹任何实际的可调用元素，调用该std::function对象将抛出std::bad_function_call异常。</p><h4 id="2、function类模板"><a href="#2、function类模板" class="headerlink" title="2、function类模板"></a>2、function类模板</h4> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">&lt;</span><span class="token function">R</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>模板参数说明：</p><p>R: 被调用函数的返回类型</p><p>Args…：被调用函数的形参<br>例如：function&lt;int(int,int)&gt; func;<br>则 function类的实例func可以指向 返回值为int型，有两个形参都为int型的函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>func <span class="token operator">=</span> f<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token comment">// 3</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> record </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformers（一）</title>
      <link href="/2022/10/03/transformers1/"/>
      <url>/2022/10/03/transformers1/</url>
      
        <content type="html"><![CDATA[<h2 id="Transformers（一）"><a href="#Transformers（一）" class="headerlink" title="Transformers（一）"></a>Transformers（一）</h2><h3 id="Transformers简介-hugging-face"><a href="#Transformers简介-hugging-face" class="headerlink" title="Transformers简介(hugging face)"></a>Transformers简介(hugging face)</h3><p><a href="https://huggingface.co/">hugging face</a>官网</p><p>Transformers 提供 API 和工具来轻松下载和训练最先进的预训练模型。使用预训练模型可以降低计算成本，并节省从头开始训练模型所需的时间和资源。这些模型支持不同模式的常见任务，例如：</p><p>📝 自然语言处理：文本分类、命名实体识别、问答、语言建模、摘要、翻译、多项选择和文本生成。</p><p>🖼️ 计算机视觉：图像分类、对象检测和分割。</p><p>🗣️ 音频：自动语音识别和音频分类。</p><p>🐙 多模式：表格问答、光学字符识别、从扫描文档中提取信息、视频分类和视觉问答。</p><p>🤗 Transformer 支持 PyTorch、TensorFlow 和 JAX 之间的框架互操作性。这提供了在模型生命周期的每个阶段使用不同框架的灵活性；在一个框架中用三行代码训练一个模型，然后在另一个框架中加载它以进行推理。模型还可以导出为 ONNX 和 TorchScript 等格式，以便在生产环境中部署。</p><h3 id="快速浏览"><a href="#快速浏览" class="headerlink" title="快速浏览"></a>快速浏览</h3><p>这里介绍怎么快速使用Hugging face的transformers的一些基础库来进行简单任务，其中涉及到的pipeline和Autoclass将会在之后进行详细的说明。</p><p>在开始之前，请确保已安装所有必要的库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> transformers datasets<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后选择你喜欢的深度学习框架，比如我比较喜欢的pytorch</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> torch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><p>pipeline() 是使用预训练模型进行推理的最简单方法。 您可以将 pipeline() 开箱即用地用于跨不同模式的许多任务。 查看下表了解一些支持的任务：</p><table><thead><tr><th><strong>任务</strong></th><th><strong>描述</strong></th><th><strong>模态</strong></th><th align="center"><strong>管道标识符</strong></th></tr></thead><tbody><tr><td>文本分类</td><td>为给定的文本序列分配标签</td><td>自然语言处理</td><td align="center">pipeline(task=“sentiment-analysis”)</td></tr><tr><td>文本生成</td><td>生成遵循给定提示的文本</td><td>自然语言处理</td><td align="center">pipeline(task=“text-generation”)</td></tr><tr><td>名称实体识别</td><td>为序列中的每个标记分配一个标签（人员、组织、位置等）</td><td>自然语言处理</td><td align="center">pipeline(task=“ner”)</td></tr><tr><td>问答</td><td>在给定上下文和问题的情况下从文本中提取答案</td><td>自然语言处理</td><td align="center">pipeline(task=“question-answering”)</td></tr><tr><td>填充蒙版(填空)</td><td>预测序列中正确的掩码标记</td><td>自然语言处理</td><td align="center">pipeline(task=“fill-mask”)</td></tr><tr><td>总结</td><td>生成一系列文本或文档的摘要</td><td>自然语言处理</td><td align="center">pipeline(task=“summarization”)</td></tr><tr><td>翻译</td><td>将文本从一种语言翻译成另一种语言</td><td>自然语言处理</td><td align="center">pipeline(task=“translation”)</td></tr><tr><td>图像分类</td><td>为图像分配标签</td><td>计算机视觉</td><td align="center">pipeline(task=“image-classification”)</td></tr><tr><td>图像分割</td><td>为图像的每个单独像素分配标签（支持语义、全景和实例分割）</td><td>计算机视觉</td><td align="center">pipeline(task=“image-segmentation”)</td></tr><tr><td>物体检测</td><td>预测图像中对象的边界框和类别</td><td>计算机视觉</td><td align="center">pipeline(task=“object-detection”)</td></tr><tr><td>音频分类</td><td>为音频文件分配标签</td><td>声音</td><td align="center">pipeline(task=“audio-classification”)</td></tr><tr><td>自动语音识别</td><td>将音频文件中的语音提取为文本</td><td>声音</td><td align="center">pipeline(task=“automatic-speech-recognition”)</td></tr><tr><td>视觉问答</td><td>给定图像和问题，正确回答有关图像的问题</td><td>多式联运</td><td align="center">pipeline(task=“vqa”)</td></tr></tbody></table><p>了解了pipeline()支持的一些任务后，首先创建一个 pipeline() 的实例并指定您要使用它的任务。 您可以将 pipeline() 用于前面提到的任何任务，有关受支持任务的完整列表，请查看<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/pipelines">pipeline API </a>参考。 不过，在本指南中，您将使用 pipeline() 进行情绪分析作为示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">from transformers <span class="token function">import</span> pipelineclassifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>pipeline下载并缓存默认的<a href="https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english">预训练模型</a>和标记器以进行情绪分析。现在您可以<code>classifier</code>在目标文本上使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>classifier<span class="token punctuation">(</span><span class="token string">'l love my wife'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [{'label': 'POSITIVE', 'score': 0.9997943043708801}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>pipeline还可以针对您喜欢的任何任务遍历整个数据集。 对于这个例子，让我们选择自动语音识别作为我们的任务：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipelinespeech_recognizer <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"automatic-speech-recognition"</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">"facebook/wav2vec2-base-960h"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>加载您想要迭代的音频数据集（有关更多详细信息，请参阅🤗 数据集<a href="https://huggingface.co/docs/datasets/quickstart#audio">快速入门</a>例如，加载<a href="https://huggingface.co/datasets/PolyAI/minds14">MInDS-14</a>数据集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_dataset<span class="token punctuation">,</span> Audiodataset <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"PolyAI/minds14"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"en-US"</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您需要确保数据集的采样率与<a href="https://huggingface.co/facebook/wav2vec2-base-960h"><code>facebook/wav2vec2-base-960h</code></a>训练过的采样率相匹配：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>cast_column<span class="token punctuation">(</span><span class="token string">"audio"</span><span class="token punctuation">,</span> Audio<span class="token punctuation">(</span>sampling_rate<span class="token operator">=</span>speech_recognizer<span class="token punctuation">.</span>feature_extractor<span class="token punctuation">.</span>sampling_rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>"audio"</code>调用列时，音频文件会自动加载和重新采样。从前 4 个样本中提取原始波形数组并将其作为列表传递给管道：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> speech_recognizer<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"audio"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> result<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#['I WOULD LIKE TO SET UP A JOINT ACCOUNT WITH MY PARTNER HOW DO I PROCEED WITH DOING THAT', "FODING HOW I'D SET UP A JOIN TO HET WITH MY WIFE AND WHERE THE AP MIGHT BE", "I I'D LIKE TOY SET UP A JOINT ACCOUNT WITH MY PARTNER I'M NOT SEEING THE OPTION TO DO IT ON THE AP SO I CALLED IN TO GET SOME HELP CAN I JUST DO IT OVER THE PHONE WITH YOU AND GIVE YOU THE INFORMATION OR SHOULD I DO IT IN THE AP AND I'M MISSING SOMETHING UQUETTE HAD PREFERRED TO JUST DO IT OVER THE PHONE OF POSSIBLE THINGS", 'HOW DO I THURN A JOIN A COUNT']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于输入较大的较大数据集（例如语音或视觉），您需要传递生成器而不是列表来将所有输入加载到内存中。查看<a href="https://huggingface.co/docs/transformers/main_classes/pipelines">管道 API 参考</a>以获取更多信息。</p><h3 id="在管道中使用另一个模型和标记器"><a href="#在管道中使用另一个模型和标记器" class="headerlink" title="在管道中使用另一个模型和标记器"></a>在管道中使用另一个模型和标记器</h3><p><a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/pipelines#transformers.pipeline">pipeline()</a>可以容纳来自<a href="https://huggingface.co/models">Hub</a>的任何模型，从而可以轻松地将<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/pipelines#transformers.pipeline">pipeline()</a>用于其他用例。例如，如果您想要一个能够处理法语文本的模型，请使用集线器上的标签来筛选合适的模型。最上面的过滤结果返回一个多语言<a href="https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment">BERT 模型</a>，该模型已针对可用于法语文本的情绪分析进行了微调：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model_name <span class="token operator">=</span> <span class="token string">"nlptown/bert-base-multilingual-uncased-sentiment"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里使用了pytorch框架，使用<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoModelForSequenceClassification">AutoModelForSequenceClassification</a>和<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>加载预训练模型及其关联的分词器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForSequenceClassificationmodel <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在pipeline()中指定模型和分词器，现在您可以应用<code>classifier</code>法语文本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">classifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">,</span> tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">)</span>classifier<span class="token punctuation">(</span><span class="token string">"l want invent a SOTA model of cv"</span><span class="token punctuation">)</span><span class="token comment">## [{'label': '5 stars', 'score': 0.39469486474990845}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果您找不到适合您的用例的模型，则需要根据您的数据微调预训练模型。在您对预训练模型进行微调后，请考虑在 Hub 上与社区<a href="https://huggingface.co/docs/transformers/model_sharing">分享</a>模型！🤗</p><p>在幕后， <a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoModelForSequenceClassification">AutoModelForSequenceClassification</a>和<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>类协同工作，为您在上面使用的<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/pipelines#transformers.pipeline">pipeline()</a>提供动力。<a href="https://huggingface.co/docs/transformers/model_doc/auto">AutoClass</a>是一种快捷方式，可以从预训练模型的名称或路径中自动检索其架构。您只需要<code>AutoClass</code>为您的任务选择合适的及其相关的预处理类。</p><h3 id="自动分词器"><a href="#自动分词器" class="headerlink" title="自动分词器"></a>自动分词器</h3><p>分词器负责将文本预处理为数字数组作为模型的输入。有多个规则可以管理标记化过程，包括如何分割单词以及应该在什么级别分割单词（在<a href="https://huggingface.co/docs/transformers/tokenizer_summary">标记器摘要</a>中了解更多关于标记化的信息）。要记住的最重要的事情是您需要实例化具有相同模型名称的标记器，以确保您使用与模型预训练相同的标记化规则。</p><p>下面加载一个分词器，使用AutoTokenizer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizermodel_name <span class="token operator">=</span> <span class="token string">"nlptown/bert-base-multilingual-uncased-sentiment"</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入你要分词的文本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">output <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token string">"Hello, y'all! How are you 😁 ?"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token comment">## {'input_ids': [101, 29155, 117, 167, 112, 10367, 106, 12548, 10320, 10855, 100, 136, 102], 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分词器返回一个字典，其中包含：</p><ul><li><a href="https://huggingface.co/docs/transformers/glossary#input-ids">input_ids</a>：代币的数字表示。</li><li><a href="https://huggingface.co/docs/transformers/.glossary#attention-mask">atttention_mask</a>：指示应关注哪些令牌。</li></ul><p>分词器还可以接受输入列表，并填充和截断文本以返回具有统一长度的批处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pt_batch <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">"We are very happy to show you the 🤗 Transformers library."</span><span class="token punctuation">,</span> <span class="token string">"We hope you don't hate it."</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    max_length<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>    return_tensors<span class="token operator">=</span><span class="token string">"pt"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Automodel"><a href="#Automodel" class="headerlink" title="Automodel"></a>Automodel</h3><p>🤗 Transformers 提供了一种简单而统一的方法来加载预训练的实例。这意味着您可以像加载自动强化器一样加载<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoTokenizer">自动模型</a>。唯一的区别是为任务选择正确的自动模型。对于文本（或序列）分类，应加载<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoModelForSequenceClassification">自动模型序列分类</a>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForSequenceClassificationmodel_name <span class="token operator">=</span> <span class="token string">"nlptown/bert-base-multilingual-uncased-sentiment"</span>pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有关<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoModel">自动模型</a>类支持的任务，请参阅任务<a href="https://huggingface.co/docs/transformers/task_summary">摘要</a>。</p></blockquote><p>现在，将预处理的一批输入直接传递给模型。您只需要通过添加以下内容来解压缩字典：<code>**</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pt_outputs <span class="token operator">=</span> pt_model<span class="token punctuation">(</span><span class="token operator">**</span>pt_batch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>模型输出属性中的最终激活。将 softmax 函数应用于logits检索概率：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnpt_predictions <span class="token operator">=</span> nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>pt_outputs<span class="token punctuation">.</span>logits<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pt_predictions<span class="token punctuation">)</span><span class="token comment">##tensor([[0.0021, 0.0018, 0.0115, 0.2121, 0.7725],</span><span class="token comment">##        [0.2084, 0.1826, 0.1969, 0.1755, 0.2365]], grad_fn=&lt;SoftmaxBackward0&gt;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h3><p>一旦您的模型被微调，您可以使用<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">PreTrainedModel.save_pretrained()</a>将其与其分词器一起保存：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pt_save_directory <span class="token operator">=</span> <span class="token string">"./pt_save_pretrained"</span>tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>pt_save_directory<span class="token punctuation">)</span>pt_model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span>pt_save_directory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当您准备好再次使用该模型时，请使用 <a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">PreTrainedModel.from_pretrained()</a>重新加载它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"./pt_save_pretrained"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个特别方便的Transformers功能是能够保存模型并将其重新加载为PyTorch或TensorFlow模型。或参数可以将模型从一个框架转换为另一个框架：<code>from_pt</code>or<code>from_tf</code>,在torch中如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModeltokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>tf_save_directory<span class="token punctuation">)</span>pt_model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>tf_save_directory<span class="token punctuation">,</span> from_tf<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义模型构建"><a href="#自定义模型构建" class="headerlink" title="自定义模型构建"></a>自定义模型构建</h3><p>您可以修改模型的配置类以更改模型的生成方式。该配置指定模型的属性，例如隐藏层或注意头的数量。从自定义配置类初始化模型时，可以从头开始。模型属性是随机初始化的，您需要先训练模型，然后才能使用它来获得有意义的结果。</p><p>首先导入<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoConfig">自动配置</a>，然后加载要修改的预训练模型。在<a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.AutoConfig.from_pretrained">AutoConfig.from_pretrained()中</a>，您可以指定要更改的属性，例如注意头的数量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoConfigmy_config <span class="token operator">=</span> AutoConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"distilbert-base-uncased"</span><span class="token punctuation">,</span> n_heads<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在pytorch中使用，</p><p>使用 <a href="https://huggingface.co/docs/transformers/v4.22.2/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config">AutoModel.from_config（）</a>从自定义配置创建模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelmy_model <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_config<span class="token punctuation">(</span>my_config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Trainer-PyTorch-优化的训练循环"><a href="#Trainer-PyTorch-优化的训练循环" class="headerlink" title="Trainer-PyTorch 优化的训练循环"></a>Trainer-PyTorch 优化的训练循环</h3><p>所有模型都是标准的 <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module"><code>torch.nn.Module</code></a>因此您可以在任何典型的训练循环中使用它们。虽然您可以编写自己的训练循环，但变形金刚为PyTorch提供了一个<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/trainer#transformers.Trainer">训练器</a>类，其中包含基本的训练循环，并为分布式训练，混合精度等功能添加了附加功能。</p><p>根据您的任务，您通常会将以下参数传递给Trainer：</p><ol><li><p><a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/model#transformers.PreTrainedModel">预训练模型</a>或<a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module"><code>torch.nn.Module</code></a>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForSequenceClassificationmodel <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"distilbert-base-uncased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/trainer#transformers.TrainingArguments">训练参数</a>包含您可以更改的模型超参数，如学习速率、批大小和要训练的 epoch 数。如果未指定任何训练参数，则使用默认值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> TrainingArgumentstraining_args <span class="token operator">=</span> TrainingArguments<span class="token punctuation">(</span>     output_dir<span class="token operator">=</span><span class="token string">"path/to/save/folder/"</span><span class="token punctuation">,</span>     learning_rate<span class="token operator">=</span><span class="token number">2e-5</span><span class="token punctuation">,</span>     per_device_train_batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>     per_device_eval_batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>     num_train_epochs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>预处理类，如分词器、特征提取器或处理器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizertokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"distilbert-base-uncased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>预处理的训练和测试数据集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_dataset <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span>  <span class="token comment"># doctest: +SKIP</span>eval_dataset <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">"eval"</span><span class="token punctuation">]</span>  <span class="token comment"># doctest: +SKIP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>从数据集创建一批示例：<code>DataCollator()</code></p></li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> DefaultDataCollatordata_collator <span class="token operator">=</span> DefaultDataCollator<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，在trainer中收集所有这些任务：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> Trainertrainer <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>     model<span class="token operator">=</span>model<span class="token punctuation">,</span>     args<span class="token operator">=</span>training_args<span class="token punctuation">,</span>     train_dataset<span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     eval_dataset<span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">,</span>     data_collator<span class="token operator">=</span>data_collator<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备就绪后，让trainer开始训练：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于使用序列到序列模型的任务（如翻译或汇总），请改用 <a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/trainer#transformers.Seq2SeqTrainer">Seq2SeqTrainer</a> 和 <a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments">Seq2Seq训练参数</a>类。</p><p>您可以通过在trainer集成，并检查训练循环以报告进度或提前停止训练。回调不会修改训练循环本身的任何内容。要自定义类似损失函数的内容，您需要改为对训练器进行子类化。</p><h3 id="使用tensorflow训练"><a href="#使用tensorflow训练" class="headerlink" title="使用tensorflow训练"></a>使用tensorflow训练</h3><p>所有模型都是标准的 <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model"><code>tf.keras.Model</code></a>因此可以使用 <a href="https://keras.io/">Keras</a> API 在张量流中训练它们。transformers提供了<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset">prepare_tf_dataset()</a>方法，可以轻松加载您的数据集，以便您可以立即开始使用Keras的<a href="https://keras.io/api/models/model_training_apis/#compile-method"><code>compile</code></a>和<a href="https://keras.io/api/models/model_training_apis/#fit-method"><code>fit</code></a>训练。</p><ol><li><p>您将从<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>或 <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model"><code>tf.keras.Model</code></a>开始：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> TFAutoModelForSequenceClassificationmodel <span class="token operator">=</span> TFAutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"distilbert-base-uncased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>预处理类，如分词器、特征提取器或处理器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizertokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"distilbert-base-uncased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个函数来标记数据集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tokenize_dataset</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> tokenizer<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用<a href="https://huggingface.co/docs/datasets/v2.5.1/en/package_reference/main_classes#datasets.Dataset.map">map</a>将分词器应用于整个数据集，然后将数据集和分词器传递给<a href="https://huggingface.co/docs/transformers/v4.22.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset">prepare_tf_dataset()</a>。如果您愿意，还可以在此处更改批大小并随机排列数据集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>tokenize_dataset<span class="token punctuation">)</span>tf_dataset <span class="token operator">=</span> model<span class="token punctuation">.</span>prepare_tf_dataset<span class="token punctuation">(</span>    dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>准备就绪后，您可以开始培训：<code>compile</code>and<code>fit</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> Adammodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span>Adam<span class="token punctuation">(</span><span class="token number">3e-5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>End!</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transformers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop从零开始搭建并运行词频统计</title>
      <link href="/2022/09/30/hadoop-cong-ling-kai-shi-da-jian/"/>
      <url>/2022/09/30/hadoop-cong-ling-kai-shi-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop从零开始搭建并运行词频统计"><a href="#Hadoop从零开始搭建并运行词频统计" class="headerlink" title="Hadoop从零开始搭建并运行词频统计"></a>Hadoop从零开始搭建并运行词频统计</h1><h2 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h2><p>1、在Vmware中安装一个centos7的linux系统，用作NameNode</p><p>2、环境配置前的一些前置操作，复制两个虚拟机作为datanode1,datanode2</p><p>3、hadoop环境配置</p><p>4、生成词库并运行wordcount进行词频统计</p><h2 id="1-安装虚拟机"><a href="#1-安装虚拟机" class="headerlink" title="1.安装虚拟机"></a>1.安装虚拟机</h2><h3 id="1-1安装所需"><a href="#1-1安装所需" class="headerlink" title="1.1安装所需"></a>1.1安装所需</h3><p>Linux + CentOS、VMware WorKstation pro、阿里云站点ISO镜像：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">CentOS-7-x86_64-Minimal-2009.iso</a>（这里选择Minimal是因为本身磁盘空间不富裕）</p><h3 id="1-2安装虚拟机"><a href="#1-2安装虚拟机" class="headerlink" title="1.2安装虚拟机"></a>1.2安装虚拟机</h3><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBe176dcf5a6ee4dad07e523949c2bb7f8?method=download&amp;shareKey=be046d13fa25c8dbe0ee6d4441d589bf" alt="img"></p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB712c066c6693b115ed422210750a88c1?method=download&amp;shareKey=30fcbe840e0588beb1005a4b2afb1863" alt="img"></p><p>选择兼容版本，没需要的话默认就好。<img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB80cab1d66c3dcad88557ddbcb803fe6e?method=download&amp;shareKey=ab9ebe47c4e175d2e37d0ddc7f457646" alt="img"></p><p>后面选择用iso映像文件安装<img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBfa7dd9e9046ca94fe4c86be9a19827f8?method=download&amp;shareKey=7694359a80b22e1c33252d4c6046f4c6" alt="img"></p><p>选择centos7</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB923d188ebafaaa26af45063e6853f55c?method=download&amp;shareKey=c50005f0cb71916e664fcd6368156060" alt="img"></p><p>这里自定义了安装位置<img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB23c4fa81776cb4ad5fcc5113c5b40b48?method=download&amp;shareKey=63c276e8ed1f32695515a876d1da7362" alt="img"></p><p>处理器配置</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBe1ac75a2f6373ecb8d1bbbc7c8a69057?method=download&amp;shareKey=23435d9a15220137feb6dca2b1f7ded0" alt="img"></p><p>内存配置</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB30a31b3cc2b8546a9e38551a46ce525d?method=download&amp;shareKey=a3631bcefbcaee8207dcf3b429857e10" alt="img"></p><p>配置网络</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBec2ca9ad660c158969399d27ea3337da?method=download&amp;shareKey=dc1a49fbcdf4ce448b04a14e99385c9d" alt="img"></p><p>默认控制器</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBcc2500ca924d187a39dce45ef3017d72?method=download&amp;shareKey=03c0e66a68a45011710fe9be8d72580b" alt="img"></p><p>默认磁盘</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB0a0d129dd52ed3aa59ecf4c7cbdda272?method=download&amp;shareKey=a2a11f9ca5916aafa4fa4ddd7021dddb" alt="img"></p><p>选择磁盘文件</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB3d5e0cac07d529d405cabc6864866611?method=download&amp;shareKey=45523dd00e0f7ae252fab47a74cc5e9c" alt="img"></p><p>这里选择20G</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBd7d696a265550ab92f66f0d5494774fb?method=download&amp;shareKey=8c7514d1cfcadc876188b3d1224bd0c4" alt="img"></p><p>指定磁盘文件位置</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB66f84ca89ef38f3eefd6cd6395af0e90?method=download&amp;shareKey=faa6fb1f09a6539a32f223d24e6772a1" alt="img"></p><p>完成后把声卡打印机这些关闭</p><h3 id="1-3接下来安装Centos"><a href="#1-3接下来安装Centos" class="headerlink" title="1.3接下来安装Centos"></a>1.3接下来安装Centos<img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBb9096039bbe0c23c6276414f83bd04b8?method=download&amp;shareKey=9d86d52a2b7fdca4a04869b99ab8d0f1" alt="img"></h3><p>打开硬盘设置，这里选择我刚才阿里站点下载的映像文件<img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB3abcb8a7a3f5130fe72975b811353e0e?method=download&amp;shareKey=c282b11de99621efece7694154bd47e4" alt="img">          启动虚拟机<img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB6587fbe47635757fab2c017e2effcccd?method=download&amp;shareKey=bd43b4691e4c56e6c239d8d649e48fdf" alt="img">然后来到新页面，这里选择字体为中文</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB57f9ad46abddd7a481b1286291838384?method=download&amp;shareKey=523b037252f3c244ec9a0a91b4a43ffe" alt="img"></p><p>地区选择上海</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBf0b3c785202f60f68e269cf1fa1f4007?method=download&amp;shareKey=a1df22a0ae763fb1615797d397352096" alt="img"></p><p>这里自动配置分区</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB45c12f7448616ac652bd0e61963ae0e8?method=download&amp;shareKey=4e26458053d0dac22d5b49b2146fb74f" alt="img"></p><p>先打开网卡，看能否获取到IP地址，再更改主机名后完成</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB593d02abf2c5f6b303d0c46d3666aebf?method=download&amp;shareKey=cc68882112304a117cea0c81d23b3dbb" alt="img"></p><p>安装完后创新一个用户，用作root用户，之后重启系统</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBb5c12875bc859175a769f240da2be7e2?method=download&amp;shareKey=cc95f6906248ee130ac4a681f04409db" alt="image-20220930121001168"></p><p>输入用户名与密码，成功登入</p><h2 id="2-虚拟机克隆与安装java"><a href="#2-虚拟机克隆与安装java" class="headerlink" title="2.虚拟机克隆与安装java"></a>2.虚拟机克隆与安装java</h2><h3 id="2-1查看网络信息，从编辑处进入"><a href="#2-1查看网络信息，从编辑处进入" class="headerlink" title="2.1查看网络信息，从编辑处进入"></a>2.1查看网络信息，从编辑处进入</h3><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB76e197c7af80e8b48053487de52770d3?method=download&amp;shareKey=f0d59793f1705f79be1929b7c06ccf8b" alt="img"></p><p>进入NAT设置，查看网关IP</p><h3 id="2-2查看网络连接状态"><a href="#2-2查看网络连接状态" class="headerlink" title="2.2查看网络连接状态"></a>2.2查看网络连接状态</h3><p>ping一下我的网站，网络连接良好，接下来ifconfig显示或设置网络设备</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB52396aea6f23ddbeca3d5ee21f3daf0d?method=download&amp;shareKey=4d5289309c118d4cc9b6a638d7291829" alt="img"></p><p>使用ifconfig查看网络</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB935147ee7b6008e847b9376d9ef5be81?method=download&amp;shareKey=dc8b6cd77c224ae6c1e726b08ca37553" alt="img"></p><p>提示没有该命令，可能是mini映像的原因，接下来进行安装，发现需要root权限，这里我直接创建了一个root用户，并切换到root下载，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> net-tools.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB4d53906ad031e1aedab20617bf9d7caf?method=download&amp;shareKey=801fe9c341442a5b216f0116269136a4" alt="img"></p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB445e612d5a290c29d42d7819d6fef05c?method=download&amp;shareKey=1f1955a3529c6f678ed56a7736373d95" alt="img"></p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB6ea6f9336a7071167964fe8f17691d44?method=download&amp;shareKey=bbb72779192688670838925c25da4017" alt="img"></p><p>这样之后基本成功了，输入ifconfig命令发现没有eth0无法远程ssh连接，这里改成eth0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/sysconfig/network-scripts/<span class="token function">mv</span> ifcfg-ens33 ifconfig-eth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB3790bbfcba10c2783aa6f7bb302cf1da?method=download&amp;shareKey=306da8106bd8d105bbf19629e4c45afc" alt="img"></p><p>发现连vim都没有，于是安装vim，使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> vim*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBf05c54754aa82065fdc60ca1d73deff3?method=download&amp;shareKey=81fa6f4936d9a6c0ee826b988abad968" alt="img">下载一会后安装成功了！</p><p>之后去更改文件，需要更改的信息，ip那里分别是ip地址，子网掩码，网关，DNS服务器设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ifconfig-eth0 ifcfg-eth0<span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB58987c34809fd5462c9b2bc3a0d80d0c?method=download&amp;shareKey=c66c76a57746b5dede651015b0cd65e9" alt="img"></p><p>之后重启网络服务，看到网卡生效</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB1e89106ab18b7daf0930472735c892d3?method=download&amp;shareKey=893dc621e8ae884c7191b28aeddde863" alt="img"></p><p>如果无法重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加入以下内容</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB598f40bf6119b1fa632a3429ad71e4ed?method=download&amp;shareKey=1a134434a136be5adbdd60da1049927f" alt="img"></p><p>执行以下命令来更改我们的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBdb2552e5332b3a4f7ae9fa6c886d280d?method=download&amp;shareKey=9ff5e131152b3695a3b9f1d466a2843e" alt="img"></p><p>之后重启虚拟机再次查看是否配置成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3更改主机名"><a href="#2-3更改主机名" class="headerlink" title="2.3更改主机名"></a>2.3更改主机名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hostname<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更改主机名之后重启</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB9222a929a163cf159c0814020328a9e8?method=download&amp;shareKey=d366bbaaf61418ed26dace1a28636d44" alt="img"></p><p>发现用户名更改成功</p><h3 id="2-4对虚拟机进行克隆得到slave1和slave2节点"><a href="#2-4对虚拟机进行克隆得到slave1和slave2节点" class="headerlink" title="2.4对虚拟机进行克隆得到slave1和slave2节点"></a>2.4对虚拟机进行克隆得到slave1和slave2节点</h3><p>关闭虚拟机，开始克隆</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB76602da806fe199742f74b6671ef54bc?method=download&amp;shareKey=0bab40704da1ca59185c21285776adbb" alt="img"><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBe7ffa48e17fa0209c449622e64890ba5?method=download&amp;shareKey=7a7f268d77d9a28724c9fd9bb30fe193" alt="img"><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBab82509e0a0d131766ffe5929b1a9d48?method=download&amp;shareKey=cfe551349e9a3705fb4f764d91d7c316" alt="img"><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB340b79c254b4a88d0138d01b4201519a?method=download&amp;shareKey=a019b6b547c0c5df644b219f7d98b25f" alt="img"></p><p>点击完成后等待一下，并用同样的方法克隆salve2</p><h3 id="2-5配置slave1和slave2的参数信息"><a href="#2-5配置slave1和slave2的参数信息" class="headerlink" title="2.5配置slave1和slave2的参数信息"></a>2.5配置slave1和slave2的参数信息</h3><p>用上面配置网络同样的方法配置salve1和salve2(需要更改网卡信息和hostname)</p><p>​                             <img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB3b711ebaaaa2b039342e6ecc055c22ed?method=download&amp;shareKey=2eb707acbebee90bbdcd9503d40071d9" alt="img"><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB33732307f1a985a0cb9203081c157ed6?method=download&amp;shareKey=cd1571c2b340a260f871ae3d8aec1c8c" alt="img"><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB9daed00bb682ff7df41b8e154eda7253?method=download&amp;shareKey=b339db4d163142fa99f2c9fbd8d00bb1" alt="img"></p><h3 id="2-6建立主机名到ip的映射"><a href="#2-6建立主机名到ip的映射" class="headerlink" title="2.6建立主机名到ip的映射"></a>2.6建立主机名到ip的映射</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBccfe4d72302b79a155917a06cdab1122?method=download&amp;shareKey=54dca496f6ff5d7f9cb82a52f915f3b3" alt="img"></p><p>查看是否配置成功</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBe1a0b698deaabd65672aae1078d65baa?method=download&amp;shareKey=1ff3a25dff3c307710e90a4ff68a15e4" alt="img"></p><h3 id="2-7配置ssh免密登录"><a href="#2-7配置ssh免密登录" class="headerlink" title="2.7配置ssh免密登录"></a>2.7配置ssh免密登录</h3><p>使用以下命令后，过程一直回车就行，出现以下页面就成功了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa<span class="token operator">&amp;&amp;</span><span class="token builtin class-name">cd</span> ~/.ssh/<span class="token operator">&amp;&amp;</span><span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">&gt;&gt;</span> ~/.ssh/authorized_keys<span class="token operator">&amp;&amp;</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys<span class="token operator">&amp;&amp;</span><span class="token function">cat</span> ~/.ssh/authorized_keys<span class="token operator">&amp;&amp;</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB252d06156f2fa745d5129c0be4d59e10?method=download&amp;shareKey=8a161b7311b24ca9e6a9513c3352b129" alt="img"></p><p>master slave1 slave2都执行这个命令并且把authorized_keys（下图标红的部分），复制到master节点的authorized_keys中。</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBfee98574ddc7d954a2908c63ba0fff8f?method=download&amp;shareKey=5a3fa0c2fb156f81be7e6ca92dd6ecde" alt="img"></p><p>之后cat master的节点的authorized_keys，出现如下三个节点信息就成功了</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBce611f9a75b5a5b7611274c3799b5fae?method=download&amp;shareKey=ac16f2603e3659dc40dd265834e1ddf0" alt="img"></p><p>把这些公钥传到子节点上，并测试是否可以免密登录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> ~/.ssh/authorized_keys root@slave1:~/.ssh/<span class="token function">scp</span> ~/.ssh/authorized_keys root@slave2:~/.ssh/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBabbc205ff7758e8f75e74bd8ab709820?method=download&amp;shareKey=88e54e526533a5a8145339cab544809f" alt="img">发现可以免密登录了</p><h3 id="2-8关闭防火墙与SELinux"><a href="#2-8关闭防火墙与SELinux" class="headerlink" title="2.8关闭防火墙与SELinux"></a>2.8关闭防火墙与SELinux</h3><p>在所有节点执行以下操作:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> iptables-servicessystemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在master节点执行以下操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBb2801eb159c66861ba386dc34aede000?method=download&amp;shareKey=ed15d2632d93b6879b98d4117f3e4e8e" alt="img"></p><h3 id="2-9安装JDK"><a href="#2-9安装JDK" class="headerlink" title="2.9安装JDK"></a>2.9安装JDK</h3><p>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html </a>之后解压到你自己创建的文件夹里，并解压到指定位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/java <span class="token function">tar</span> <span class="token parameter variable">-vzxf</span> <span class="token function">tar</span> <span class="token parameter variable">-vzxf</span> jdk-8u333-linux-x64<span class="token punctuation">\</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>.tar.gz <span class="token parameter variable">-C</span> /usr/local/java/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后查看是否解压成功</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB5ec4ec9f12fb376d40cbd9e009f0fe64?method=download&amp;shareKey=9caf874016fca712a5bcba50d4b8c14b" alt="img"></p><p>在文件最下方或者指定文件添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.8.0_333<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$CLASSPATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/lib/<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB8c7edcc275ed585167abdcd3b69a7baa?method=download&amp;shareKey=30d21a6c5ceb82af7a25345acd8a9df6" alt="img"></p><p>执行代码应用环境变量，并查看是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile <span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB9c255e0454d62979ddcf6e81f31f3d9b?method=download&amp;shareKey=0c1dc2cc6e6291bb5356d9aa029bc865" alt="img"></p><h3 id="2-10创建新用户"><a href="#2-10创建新用户" class="headerlink" title="2.10创建新用户"></a>2.10创建新用户</h3><p>创建一个名为hadoop的用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser hadoop<span class="token function">passwd</span> hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后查看是否创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">usermod</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-6</span> hadoop hadoop <span class="token function">cat</span> /etc/group<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB3ad038e087d9ceb7154e830ded40556a?method=download&amp;shareKey=cc7165312c80b6c424ee6aa2b1864552" alt="img"></p><p>找到下面信息，即创建成功</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBbc291fdcd343efb15b05943a66a792fc?method=download&amp;shareKey=15c3cb21b42d253f116b4fe514b37fd9" alt="img"></p><p>找到如下信息，说明创建用户成功了</p><p>赋予其超级用户权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在下面加上如下信息</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBf17025008f566c57714debbf236cb820?method=download&amp;shareKey=43f5c958eb821c1cc30aef6c2b503d77" alt="img"></p><p>增加一个hadoop用户</p><h2 id="3-Hadoop安装与运行"><a href="#3-Hadoop安装与运行" class="headerlink" title="3.Hadoop安装与运行"></a>3.Hadoop安装与运行</h2><h3 id="3-1Hadoop环境配置"><a href="#3-1Hadoop环境配置" class="headerlink" title="3.1Hadoop环境配置"></a>3.1Hadoop环境配置</h3><p>下载网址：<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.1.3/hadoop-3.1.3.tar.gz">https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.1.3/hadoop-3.1.3.tar.gz</a></p><p>并放在自己的文件下进行解压，解压后查看</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBf1cbd46c38366d1c0d59cefe83690d5f?method=download&amp;shareKey=233af08572e11f05803d087e9bcf132a" alt="img"></p><p>解压后加入如下环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./etc/hadoop/<span class="token operator">&amp;&amp;</span><span class="token function">vim</span> hadoop-env.sh<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.8.0_333/<span class="token assign-left variable">HADOOP_PREFIX</span><span class="token operator">=</span>/usr/hadoop-3.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB67593f8f72cdd29313f4ad688d78fc41?method=download&amp;shareKey=5fc9278a3e81b28af2532509dc89d591" alt="img"></p><p>在这个文档里面添加，hadoop版本按照自己的需求来</p><p>之后在yarn-env.sh中加入如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> yarn-env.sh<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$JAVA_HOME</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token punctuation">\</span>#echo <span class="token string">"run java in <span class="token variable">$JAVA_HOME</span>"</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.8.0_333/ <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBa8a3609ce5bcf9da8273b76cafc92adc?method=download&amp;shareKey=22b19b60ecfadf6c1224c2bc5b92ae19" alt="img"></p><p>打开当前文件夹下的slaves或者workers，把原本的名称删掉，改成自己的datanode节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> workers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBed3633bbe16178f753811c9ae7d819f3?method=download&amp;shareKey=7920482e2b8c8999f8c6352d38c21ec5" alt="img"></p><p>添加以下环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/usr/hadoop-3.1.3<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBe77cb6a9b8bea86ffe307e35c54b35d4?method=download&amp;shareKey=b7500e6a67a927349151057c9b3e2404" alt="img"></p><h3 id="3-2更改配置文件"><a href="#3-2更改配置文件" class="headerlink" title="3.2更改配置文件"></a>3.2更改配置文件</h3><p>在sbin目录下更改xml文件，更改xml文件的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/hadoop-3.1.3/sbin/<span class="token function">vim</span> core-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>io.file.buffer.size<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>131072<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>file:/usr/local/hadoop-3.1.3/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Abase for other temporary  directories.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.proxyuser.hduser.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.proxyuser.hduser.groups<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> hdfs-site.xm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>file:/usr/hadoop-3.1.3/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>file:/usr/hadoop-3.1.3/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>vim mapred-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>vim yarn-site.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>                                ​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.mapred.ShuffleHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:8032<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.scheduler.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:8030<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.resource-tracker.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:8031<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.admin.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:8033<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>master:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB35547022ee5061407c904bc5611659f3?method=download&amp;shareKey=58fabbba0a7ce494a482fac434f4e2a6" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop classpath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB7303f72ba4dbbf927807cf5941af6e18?method=download&amp;shareKey=74c59177ca5f2a62dfce87410ea594f5" alt="img"></p><p>复制打印出的信息，添加到yarn-site.xml中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.application.classpath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>​    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/usr/hadoop-3.1.3/etc/hadoop:/usr/hadoop-3.1.3/share/hadoop/common/lib/*:/usr/hadoop-3.1.3/share/hadoop/common/*:/usr/hadoop-3.1.3/share/hadoop/hdfs:/usr/hadoop-3.1.3/share/hadoop/hdfs/lib/*:/usr/hadoop-3.1.3/share/hadoop/hdfs/*:/usr/hadoop-3.1.3/share/hadoop/mapreduce/lib/*:/usr/hadoop-3.1.3/share/hadoop/mapreduce/*:/usr/hadoop-3.1.3/share/hadoop/yarn:/usr/hadoop-3.1.3/share/hadoop/yarn/lib/*:/usr/hadoop-3.1.3/share/hadoop/yarn/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>​    &lt;/property<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3进行传输与连接"><a href="#3-3进行传输与连接" class="headerlink" title="3.3进行传输与连接"></a>3.3进行传输与连接</h3><p>传输给两个子节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> /usr/hadoop-3.1.3/ root@slave1:/usr/<span class="token operator">&amp;&amp;</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> /usr/hadoop-3.1.3/ root@slave2:/usr/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式化namenode</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/hadoop-3.1.3/bin/hdfs namenode <span class="token parameter variable">-format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/hadoop-3.1.3/sbin/stop-all.sh<span class="token operator">&amp;&amp;</span>/usr/hadoop-3.1.3/sbin/start-dfs.sh<span class="token operator">&amp;&amp;</span>/usr/hadoop-3.1.3/sbin/start-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否成功</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB75d1d8b647424c265d7141e9afc7f589?method=download&amp;shareKey=c5433f679c85cbb36344438a411bd608" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs dfsadmin <span class="token parameter variable">-report</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搭建成功，两个datanode一个namenode</p><p>至此，hadoop搭建完毕</p><h3 id="3-4运行Wordcount程序"><a href="#3-4运行Wordcount程序" class="headerlink" title="3.4运行Wordcount程序"></a>3.4运行Wordcount程序</h3><p>创建一个txt文件放置在指定路径，然后导入数据</p><p>本实验选择的数据为：</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBf4d1014b6140b4858962f82a95b0fadb?method=download&amp;shareKey=2b4c9db55c59d5a74c737621a4ff65df" alt="img"></p><p>通过xftp文件传输以后，将数据移动到linux</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBf110befa846c21e7b80a46be518ef274?method=download&amp;shareKey=3807827cf8c019428f28bc607f1ba6c7" alt="img"></p><p>之后将数据导入hadoop</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop fs <span class="token parameter variable">-mkdir</span> <span class="token parameter variable">-p</span> /usr/hadoop-3.1.3/input<span class="token operator">&amp;&amp;</span>hadoop fs <span class="token parameter variable">-put</span> /home/20200171010204 /input/* /usr/hadoop-3.1.3/input<span class="token operator">&amp;&amp;</span>hadoop fs <span class="token parameter variable">-ls</span> /usr/hadoop-3.1.3/input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB26aa65dcd9e9823f8fd69183a24abce2?method=download&amp;shareKey=2246ce0a8c9f57b2ead6e2c5dbb8d981" alt="img"></p><p>导入成功，接下来开始运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop jar /usr/hadoop-3.1.3/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /usr/hadoop-3.1.3/input /usr/hadoop-3.1.3/output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB6118d24d79b7408f698953cbf4dc4532?method=download&amp;shareKey=42d73ddaf5ca9545596f0c0dd9c92865" alt="img"></p><p>运行成功</p><p>查看output文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop dfs <span class="token parameter variable">-ls</span> /usr/hadoop-3.1.3/output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEBce5cae928788a83891dd9c297c1d6ab5?method=download&amp;shareKey=942190e3ccbbf3c39877b16a03596e5b" alt="img"></p><p>打印其中的结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop dfs <span class="token parameter variable">-cat</span> /usr/hadoop-3.1.3/output/part-r-00000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到每一个单词的频率</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB2d0c9b924c7ec776ff4ec172d60aeac6?method=download&amp;shareKey=91c70a9375caa2624de5dc73a58786aa" alt="image-20220930110844323"></p><p>至此，hadoop平台搭建完毕并成功运行了实例wordcount。</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像文件系统</title>
      <link href="/2022/09/13/docker-jing-xiang-jiang-jie/"/>
      <url>/2022/09/13/docker-jing-xiang-jiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker镜像文件系统浅析"><a href="#Docker镜像文件系统浅析" class="headerlink" title="Docker镜像文件系统浅析"></a>Docker镜像文件系统浅析</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时的库、环境变量和配置文件。</p><p>所有的应用都可以打包成docker镜像，就可以直接跑起来！</p><p>得到镜像的方式：</p><ul><li><p>从远程仓库下载</p></li><li><p>朋友拷贝</p></li><li><p>自己制作一个镜像DockerFile</p></li></ul><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>  UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>  docker的镜像实际是由一层一层的文件系统组成，这种层级的文件系统是UnionFS。</p><p>bootfs（boot file system）主要包含了bootloader和kernel，bootloader主要是引导加载kernel，Liunx刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Liunx/Unix系统是一样的，包含boot加载器和内核。当boot加载完成以后整个内核就都在内存之中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system），在bootfs之上。包含的就是典型的Linux系统中的/dev,/proc/,/bin,/etc等标准目录和文件。roootfs就是各种不同的操作系统发行版，比如Ubuntu,Centos等等。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBbc3221b79d035fa069a2faf91ed4a055?method=download&amp;shareKey=7b4295060d7963b79fd7639f1f82c341" alt=""></p><p>上图中，aufs (advanced multi layered unification filesystem),是一种可堆叠的文件系统。对于linux上不同版本的问题，docker可以同时运行多个rootfs.</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB8e8d4d14639dc62eaf5b1c57bfb9ccc0?method=download&amp;shareKey=a4fc63c73f8ab1675422a5e57dc49d82" alt="docker同时运行多个roofts"></p><p>Docker的文件系统是分层的，它的rootfs在mount之后会转为只读模式。 Docker在它上面添加一个新的文件系统，来达成它的只读。事实上，从下图中，我们能看到多个只读的文件系统，Docker中把他们称为 层。image是只读的，container部分则是可写的。如果用户想要修改底层只读层上的文件，这个文件就会被先拷贝到上层，修改后驻留在上层，并屏蔽原有的下层文件。</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB605fe52951972141b02c3f25bc79987c?method=download&amp;shareKey=b210169d30da480925e5d9a70a36a6db" alt="docker修改只读层后覆盖原有下层文件"></p><p>最后一部分是容器(container)， 容器是可读写的。在系统启动时，Docker会首先一层一层的加载image，直到最先面的base image。而这些image都是只读的。最后，在最上层添加可读写的一个容器， 这里存放着诸如unique id，网络配置之类的信息。既然是可读写的，就会有状态。容器共有两种状态：running 和 exited。用户也可以用docker commit 命令将一个容器压制为image，供后续使用。</p><p><img src="themes/loading.gif" data-original="https://note.youdao.com/yws/api/personal/file/WEB6ffdde36ae6a9962be66ce06133e8fd2?method=download&amp;shareKey=e1763f5ffa192ffa91e23ebad07ddf3d" alt="启动时的容器"></p><p>参考:</p><p><a href="https://b23.tv/v0Guouj">【狂神说Java】Docker最新超详细版教程通俗易懂-哔哩哔哩</a></p><p><a href="https://blog.csdn.net/xiaobai316/article/details/121631833">镜像分层&amp;文件系统rootfs bootfs</a></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformers的性能优化方法</title>
      <link href="/2022/09/09/transformers-de-xing-neng-you-hua-fang-fa/"/>
      <url>/2022/09/09/transformers-de-xing-neng-you-hua-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Transformers的性能优化方法"><a href="#Transformers的性能优化方法" class="headerlink" title="Transformers的性能优化方法"></a>Transformers的性能优化方法</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自BERT出现以来，nlp领域已经进入了大模型的时代，大模型虽然效果好，但是毕竟不是人人都有着丰富的GPU资源，在训练时往往就捉襟见肘，出现显存out of memory的问题，或者训练时间非常非常的久，因此，如何在GPU资源受限的情况下训练transformers库上面的大模型就成了没有高计算资源的人所追求的。</p><p>尽管Huggingface开源的Transformers在自然语言处理（NLP）任务中取得了惊人的成功，但由于里面的模型参数数量庞大，即使是使用GPU进行训练或者部署，也仍具有非常大的挑战性，因为用如此大的模型进行训练或推理，会很容易发生显存不足（OOM）以及训练时间过长的问题。</p><p>然而，有很多方法可以避免显存不足以及训练时间过长的方法，这篇文章的主要贡献就是介绍了这些方法的原理以及如何实现，具体包括以下几种方法：</p><ol><li>梯度累积（Gradient Accumulation）</li><li>冻结（Freezing）</li><li>自动混合精度（Automatic Mixed Precision）</li><li>8位优化器（8-bit Optimizers）</li><li>梯度检查点（Gradient Checkpointing）</li><li>快速分词器（Fast Tokenizers）</li><li>动态填充（Dynamic Padding）</li><li>均匀动态填充（Uniform Dynamic Padding）</li></ol><p>其中1-5是神经网络通用的方法，可以用在任何网络的性能优化上，6-8是针对nlp领域的性能优化方法。</p><h3 id="一、梯度积累"><a href="#一、梯度积累" class="headerlink" title="一、梯度积累"></a>一、梯度积累</h3><p>梯度累积背后的想法非常简单，就是为了模拟更大的批量（batch）。有时，为了更好地收敛或提高性能，需要使用大批量进行训练，但是，这通常需要更大的显存。这个问题的一种可能的解决方案是使用较小的批量，但是，一方面，小批量训练会增加训练和推理时间，另一方面，梯度下降算法对批量大小的选择非常敏感，小批量可能会导致不稳定的收敛和性能降低。所以，我们可以先执行几次前向传播和反向传播，使得梯度进行累积，当我们有足够的计算梯度时，再对参数进行优化，从而利用小显存，模拟大批量的效果，并且训练时间也不会大幅增加。<img src="themes/loading.gif" data-original="https://pic4.zhimg.com/80/v2-44dcba68d69e9273e52cc174cd86e9d7_720w.jpg"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token comment"># perform validation loop each `validation_steps` training steps!</span>validation_steps <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>validation_steps <span class="token operator">*</span> gradient_accumulation_steps<span class="token punctuation">)</span><span class="token keyword">for</span> step<span class="token punctuation">,</span> batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># prepare inputs and targets for the model and loss function respectively.</span>    <span class="token comment"># forward pass</span>    outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    <span class="token comment"># computing loss</span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token comment"># accumulating gradients over steps</span>    <span class="token keyword">if</span> gradient_accumulation_steps <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> loss <span class="token operator">/</span> gradient_accumulation_steps    <span class="token comment"># backward pass</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># perform optimization step after certain number of accumulating steps and at the end of epoch</span>    <span class="token keyword">if</span> step <span class="token operator">%</span> gradient_accumulation_steps <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> step <span class="token operator">==</span> steps<span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_norm<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># perform validation loop</span>    <span class="token keyword">if</span> step <span class="token operator">%</span> validation_steps <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        validation_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、冻结"><a href="#二、冻结" class="headerlink" title="二、冻结"></a>二、冻结</h3><p>冻结是一种非常有效的方法，通过取消计算模型某些层中的梯度计算（如embedding层，bert的前几层），可以大大加快训练速度并且降低了显存占用，而且几乎不会损失模型的性能。</p><p>深度学习中的一个众所周知的事实是，网络的底层学习输入数据的通用特征，而网络顶层学习目标任务特定的高级特征，所以在对预训练模型进行微调时，一般网络底层的参数都不怎么需要变，这些都是通用的知识，需要学习的是顶层的那些参数，当使用某种优化算法（如SGD、AdamW或RMSprop）执行优化步骤时，网络的底层的梯度就都很小，因此参数几乎保持不变，这也被称为梯度消失，因此，与其花费大量的时间和算力来计算底层这些“无用”梯度，并对此类梯度很小的参数进行优化，不如直接冻结它们，直接不计算梯度也不进行优化。</p><p>PyTorch为关闭梯度计算提供了一个舒适的API，可以通过<code>torch.Tensor</code>的属性<code>requires_ grad</code>设置。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">freeze</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Freezes module's parameters.    """</span>    <span class="token keyword">for</span> parameter <span class="token keyword">in</span> module<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parameter<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">get_freezed_parameters</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Returns names of freezed parameters of the given module.    """</span>    freezed_parameters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name<span class="token punctuation">,</span> parameter <span class="token keyword">in</span> module<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> parameter<span class="token punctuation">.</span>requires_grad<span class="token punctuation">:</span>            freezed_parameters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> freezed_parameters<span class="token keyword">import</span> torch<span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoConfig<span class="token punctuation">,</span> AutoModel<span class="token comment"># initializing model</span>model_path <span class="token operator">=</span> <span class="token string">"microsoft/deberta-v3-base"</span>config <span class="token operator">=</span> AutoConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span><span class="token comment"># freezing embeddings and first 2 layers of encoder</span>freeze<span class="token punctuation">(</span>model<span class="token punctuation">.</span>embeddings<span class="token punctuation">)</span>freeze<span class="token punctuation">(</span>model<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>layer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>freezed_parameters <span class="token operator">=</span> get_freezed_parameters<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Freezed parameters: </span><span class="token interpolation"><span class="token punctuation">{</span>freezed_parameters<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># selecting parameters, which requires gradients and initializing optimizer</span>model_parameters <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> parameter<span class="token punctuation">:</span> parameter<span class="token punctuation">.</span>requires_grad<span class="token punctuation">,</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>params<span class="token operator">=</span>model_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">2e-5</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、自动混合精度"><a href="#三、自动混合精度" class="headerlink" title="三、自动混合精度"></a>三、自动混合精度</h3><p>自动混合精度（AMP）是另一种在不损失最终质量的情况下减少显存消耗和训练时间的方法，该方法由NVIDIA和百度研究人员在2017年的<a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1710.03740">“Mixed Precision Training”</a>论文中提出。该方法背后的关键思想是使用较低的精度将模型的梯度和参数保留在内存中，即不使用全精度（float32），而是使用半精度（例如float16）将张量保存在内存中。然而，当以较低精度计算梯度时，某些值可能太小，以至于被视为零，这种现象被称为“溢出”。为了防止“溢出”，原始论文的作者提出了一种梯度缩放方法。</p><p>PyTorch从1.6的版本开始提供了一个包：<code>torch.cuda.amp</code>，具有使用自动混合精度所需的功能（从降低精度到梯度缩放），自动混合精度作为上下文管理器实现，因此可以随时随地的插入到训练和推理脚本中。</p><p><img src="themes/loading.gif" data-original="https://pic4.zhimg.com/80/v2-ab9524dd52f5c21feda569e4d20bf763_720w.jpg" alt="img"></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>amp <span class="token keyword">import</span> autocast<span class="token punctuation">,</span> GradScalerscaler <span class="token operator">=</span> GradScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> step<span class="token punctuation">,</span> batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># prepare inputs and targets for the model and loss function respectively.</span>    <span class="token comment"># forward pass with `autocast` context manager</span>    <span class="token keyword">with</span> autocast<span class="token punctuation">(</span>enabled<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    <span class="token comment"># computing loss</span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token comment"># scale gradint and perform backward pass</span>    scaler<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># before gradient clipping the optimizer parameters must be unscaled.</span>    scaler<span class="token punctuation">.</span>unscale_<span class="token punctuation">(</span>optimizer<span class="token punctuation">)</span>    <span class="token comment"># perform optimization step</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_norm<span class="token punctuation">)</span>    scaler<span class="token punctuation">.</span>step<span class="token punctuation">(</span>optimizer<span class="token punctuation">)</span>    scaler<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、8-bit-Optimizers"><a href="#四、8-bit-Optimizers" class="headerlink" title="四、8-bit Optimizers"></a>四、8-bit Optimizers</h3><p>8-bit Optimizers的思想类似于自动混合精度（模型的参数和梯度使用较低的精度保存），但8-bit Optimizers还让优化器的状态使用低精度保存。作者（Meta Research）在最初的论文<a href="https://link.zhihu.com/?target=https://arxiv.org/abs/2110.02861">“8-bit Optimizers via Block-wise Quantization”</a>中详细介绍了8-bit Optimizers，表明8-bit Optimizers显著降低了显存占用，略微加快了训练速度。此外，作者研究了不同超参数设置的影响，表明8-bit Optimizers对不同的学习率、beta和权重衰减参数的效果是稳定的，不会降低性能或影响收敛性。因此，作者为8位优化器提供了一个高级库，叫做<a href="https://link.zhihu.com/?target=https://github.com/facebookresearch/bitsandbytes">bitsandbytes</a>。<br><img src="themes/loading.gif" data-original="https://pic4.zhimg.com/80/v2-92e7f83a4dc586e46efad17655f62053_720w.jpg" alt="img"></p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">!pip install <span class="token operator">-</span>q bitsandbytes<span class="token operator">-</span>cuda110<span class="token keyword">def</span> <span class="token function">set_embedding_parameters_bits</span><span class="token punctuation">(</span>embeddings_path<span class="token punctuation">,</span> optim_bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    https://github.com/huggingface/transformers/issues/14819#issuecomment-1003427930    """</span>    embedding_types <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span> <span class="token string">"position"</span><span class="token punctuation">,</span> <span class="token string">"token_type"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> embedding_type <span class="token keyword">in</span> embedding_types<span class="token punctuation">:</span>        attr_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>embedding_type<span class="token punctuation">}</span></span><span class="token string">_embeddings"</span></span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>embeddings_path<span class="token punctuation">,</span> attr_name<span class="token punctuation">)</span><span class="token punctuation">:</span>             bnb<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>GlobalOptimManager<span class="token punctuation">.</span>get_instance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>register_module_override<span class="token punctuation">(</span>                <span class="token builtin">getattr</span><span class="token punctuation">(</span>embeddings_path<span class="token punctuation">,</span> attr_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'weight'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'optim_bits'</span><span class="token punctuation">:</span> optim_bits<span class="token punctuation">}</span>            <span class="token punctuation">)</span><span class="token keyword">import</span> bitsandbytes <span class="token keyword">as</span> bnb<span class="token comment"># selecting parameters, which requires gradients</span>model_parameters <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> parameter<span class="token punctuation">:</span> parameter<span class="token punctuation">.</span>requires_grad<span class="token punctuation">,</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># initializing optimizer </span>bnb_optimizer <span class="token operator">=</span> bnb<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>params<span class="token operator">=</span>model_parameters<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">2e-5</span><span class="token punctuation">,</span> weight_decay<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> optim_bits<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment"># bnb_optimizer = bnb.optim.AdamW8bit(params=model_parameters, lr=2e-5, weight_decay=0.0) # equivalent to the above line</span><span class="token comment"># setting embeddings parameters</span>set_embedding_parameters_bits<span class="token punctuation">(</span>embeddings_path<span class="token operator">=</span>model<span class="token punctuation">.</span>embeddings<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"8-bit Optimizer:\n\n</span><span class="token interpolation"><span class="token punctuation">{</span>bnb_optimizer<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、梯度检查点"><a href="#五、梯度检查点" class="headerlink" title="五、梯度检查点"></a>五、梯度检查点</h3><p>有时候，即使用了上面的几种方法，显存可能还是不够，尤其是在模型足够大的情况下。那么梯度检查点（Gradient Checkpointing）就是压箱底的招数了，这个方法第一次在 <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1604.06174">“Training Deep Nets With Sublinear Memory Cost”</a> ，作者表明梯度检查点可以显著降低显存利用率，从$O(n)$降低到$O(\sqrt{n})$，其中n是模型的层数。这种方法允许在单个GPU上训练大型模型，或者提供更多内存以增加批量大小，从而更好更快地收敛。梯度检查点背后的思想是在小数据块中计算梯度，同时在正向和反向传播过程中从内存中移除不必要的梯度，从而降低内存利用率，但是这种方法需要更多的计算步骤来再现整个反向传播图，其实就是一种用时间来换空间的方法。</p><p><img src="themes/loading.gif" data-original="https://pic3.zhimg.com/80/v2-e9e1a4e238eda8c1b84097f7a0756016_720w.jpg" alt="img"></p><p><img src="themes/loading.gif" data-original="https://pic2.zhimg.com/v2-1ca17b3bb4c3ce6de82369909371c4d1_b.webp" alt="梯度检查点如何在正向和反向传播过程中工作"></p><p>PyTorch框架里也有梯度检查点的实现，通过这两个函数<code>torch.utils.checkpoint.checkpoint</code>和<code>torch.utils.checkpoint.checkpoint_sequential</code>这边引用一段torch官网对梯度检查点的介绍：</p><blockquote><p>梯度检查点通过用计算换取内存来工作。检查点部分不是存储整个计算图的所有中间激活以进行反向计算，而是不保存中间激活，而是在反向过程中重新计算它们。它可以应用于模型的任何部分。 具体而言，在前向传播中，该函数将以torch.no_grad()的方式运行，即不存储中间激活。然而，前向传播保存了输入元组和函数参数。在反向传播时，检索保存的输入和函数，然后再次对函数进行前向传播，现在跟踪中间激活，然后使用这些激活值计算梯度。</p></blockquote><p>此外，HuggingFace Transformers也支持梯度检查点。梯度检查点可以通过PreTrainedModel实例的gradient_checkpointing_enable方法执行，一行代码直接搞定！</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoConfig<span class="token punctuation">,</span> AutoModel<span class="token comment"># https://github.com/huggingface/transformers/issues/9919</span><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>checkpoint <span class="token keyword">import</span> checkpoint<span class="token comment"># initializing model</span>model_path <span class="token operator">=</span> <span class="token string">"microsoft/deberta-v3-base"</span>config <span class="token operator">=</span> AutoConfig<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> config<span class="token operator">=</span>config<span class="token punctuation">)</span><span class="token comment"># gradient checkpointing</span>model<span class="token punctuation">.</span>gradient_checkpointing_enable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Gradient Checkpointing: </span><span class="token interpolation"><span class="token punctuation">{</span>model<span class="token punctuation">.</span>is_gradient_checkpointing<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、快速分词器"><a href="#六、快速分词器" class="headerlink" title="六、快速分词器"></a>六、快速分词器</h3><p>HuggingFace Transformers提供两种类型的分词器：基本分词器和快速分词器。它们之间的主要区别在于，快速分词器是在Rust上编写的，因为Python在循环中非常慢，但在分词的时候又要用到循环。快速分词器是一种非常简单的方法，允许我们在分词的时候获得额外的加速。要使用快速分词器也很简单，只要把<a href="https://link.zhihu.com/?target=https://huggingface.co/docs/transformers/v4.19.3/en/model_doc/auto%23transformers.AutoTokenizer">transformers.AutoTokenizer</a> 里面的<a href="https://link.zhihu.com/?target=https://huggingface.co/docs/transformers/v4.19.3/en/model_doc/auto%23transformers.AutoTokenizer.from_pretrained">from_pretrained</a>方法的<code>use_fast</code>的值修改为True就可以了。</p><p><img src="themes/loading.gif" data-original="https://pic2.zhimg.com/80/v2-d3fdb5b0b0c833df777d5e436b8f65f5_720w.jpg" alt="分词器的工作原理"></p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token comment"># initializing Base version of Tokenizer</span>model_path <span class="token operator">=</span> <span class="token string">"microsoft/deberta-v3-base"</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> use_fast<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Base version Tokenizer:\n\n</span><span class="token interpolation"><span class="token punctuation">{</span>tokenizer<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># initializing Fast version of Tokenizer</span>fast_tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> use_fast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Fast version Tokenizer:\n\n</span><span class="token interpolation"><span class="token punctuation">{</span>fast_tokenizer<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、动态填充"><a href="#七、动态填充" class="headerlink" title="七、动态填充"></a>七、动态填充</h3><p>通常来说，模型是用批量数据输入训练的，批中的每个输入必须具有固定大小，即一批量的数据必须是矩阵的表示，所有批量数据的尺寸都一样。固定尺寸通常是根据数据集中的长度分布、特征数量和其他因素来选择的。在NLP任务中，输入大小称为文本长度，或者最大长度（max length）。然而，不同的文本具有不同的长度，为了处理这种情况，研究人员提出了填充标记和截断。当最大长度小于输入文本的长度时，会使用截断，因此会删除一些标记。当输入文本的长度小于最大长度时，会将填充标记，比如[PAD]，添加到输入文本的末尾，值得注意的是，填充标记不应包含在某些任务的损失计算中（例如掩蔽语言建模或命名实体识别）</p><p><img src="themes/loading.gif" data-original="https://pic3.zhimg.com/80/v2-8b44b4a2497f6b0e1187ec4d2987eec6_720w.jpg" alt="固定长度填充"><br>然而，填充标记有明显的缺点。比如在输入文本相对于选定的最大长度非常短的情况下，效率就很低，需要更多的额外内存，比如我有一条文本长度512，然后其他文本长度都在10左右，那么如果将max seq设置为512，就会导致很多无效计算。为了防止额外的计算操作，研究人员提出了一种非常有效的方法，就是将批量的输入填充到这一批量的最大输入长度，如下图所示，这种方法可以将训练速度提高35%甚至50%，当然这种方法加速的效果取决于批量的大小以及文本长度的分布，批量越小，加速效果越明显，文本长度分布越不均，加速效果也越好。</p><p><img src="themes/loading.gif" data-original="https://pic1.zhimg.com/80/v2-8210d4e9d151239bcffa5dba3b4bb690_720w.jpg" alt="动态填充"></p><h3 id="八、均匀动态填充"><a href="#八、均匀动态填充" class="headerlink" title="八、均匀动态填充"></a>八、均匀动态填充</h3><p>还有一种基于动态填充的方法，叫做均匀动态填充。其思想是在分batch时，先按文本的长度对文本进行排序，这样同一个batch里面的文本长度就都差不多。这种方法非常有效，在训练或推理期间的计算量都比动态填充要来的少。但是，不建议在训练期间使用均匀动态填充，因为训练时数据最好是要shuffer的，但是推理时如果一次性要推理很多文本的话可以考虑这么做</p><p><img src="themes/loading.gif" data-original="https://pic1.zhimg.com/80/v2-44d8344ba79d207aa16bd600f759c000_720w.jpg" alt="均匀动态填充"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>即使在现代GPU上，优化内存和时间也是开发模型的必要步骤，因此，本文介绍了加速训练和减少transformers等大型模型内存消耗的最强大、最流行的方法。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://link.zhihu.com/?target=https://huggingface.co/docs/transformers/performance">Performance and Scalability: How To Fit a Bigger Model and Train It Faster</a></li><li><a href="https://link.zhihu.com/?target=https://www.kaggle.com/code/rhtsingh/speeding-up-transformer-w-optimization-strategies">Speeding up Transformer w/ Optimization Strategies</a></li><li><a href="https://link.zhihu.com/?target=https://www.kaggle.com/competitions/AI4Code/discussion/327777">Things you can try to speed up training speed and preventing memory shortage if you are using transformers.</a></li><li><a href="https://link.zhihu.com/?target=https://www.kaggle.com/competitions/feedback-prize-2021/discussion/303131">8-bit Adam and other memory optimizations</a></li><li><a href="https://link.zhihu.com/?target=https://medium.com/tensorflow/fitting-larger-networks-into-memory-583e3c758ff9">Fitting larger networks into memory.</a></li></ol><p>注：这篇文章源自<a href="https://link.zhihu.com/?target=https://www.kaggle.com/vad13irt">@Vadim Irtlach</a>大佬在kaggle的<a href="https://link.zhihu.com/?target=https://www.kaggle.com/code/vad13irt/optimization-approaches-for-transformers/notebook">开源notebook</a>，并由<a href="https://www.zhihu.com/people/lukan217/posts">Lukan</a>翻译而来，<a href="https://zhuanlan.zhihu.com/p/555283334">原文链接</a>，本文章让我受益匪浅，因此将其记录下来不断学习。</p>]]></content>
      
      
      <categories>
          
          <category> nlp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transformers </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
